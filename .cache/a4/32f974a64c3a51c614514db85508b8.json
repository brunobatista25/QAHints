{"id":"../node_modules/prismjs/components/prism-jsx.min.js","dependencies":[{"name":"/app/package.json","includedInParent":true,"mtime":1658701554437},{"name":"/app/.babelrc","includedInParent":true,"mtime":1658699094276},{"name":"/app/node_modules/prismjs/package.json","includedInParent":true,"mtime":1658754415000}],"generated":{"js":"!function (t) {\n  var n = t.util.clone(t.languages.javascript),\n      e = \"(?:\\\\{<S>*\\\\.{3}(?:[^{}]|<BRACES>)*\\\\})\";\n\n  function a(t, n) {\n    return t = t.replace(/<S>/g, function () {\n      return \"(?:\\\\s|//.*(?!.)|/\\\\*(?:[^*]|\\\\*(?!/))\\\\*/)\";\n    }).replace(/<BRACES>/g, function () {\n      return \"(?:\\\\{(?:\\\\{(?:\\\\{[^{}]*\\\\}|[^{}])*\\\\}|[^{}])*\\\\})\";\n    }).replace(/<SPREAD>/g, function () {\n      return e;\n    }), RegExp(t, n);\n  }\n\n  e = a(e).source, t.languages.jsx = t.languages.extend(\"markup\", n), t.languages.jsx.tag.pattern = a(\"</?(?:[\\\\w.:-]+(?:<S>+(?:[\\\\w.:$-]+(?:=(?:\\\"(?:\\\\\\\\[^]|[^\\\\\\\\\\\"])*\\\"|'(?:\\\\\\\\[^]|[^\\\\\\\\'])*'|[^\\\\s{'\\\"/>=]+|<BRACES>))?|<SPREAD>))*<S>*/?)?>\"), t.languages.jsx.tag.inside.tag.pattern = /^<\\/?[^\\s>\\/]*/, t.languages.jsx.tag.inside[\"attr-value\"].pattern = /=(?!\\{)(?:\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*'|[^\\s'\">]+)/, t.languages.jsx.tag.inside.tag.inside[\"class-name\"] = /^[A-Z]\\w*(?:\\.[A-Z]\\w*)*$/, t.languages.jsx.tag.inside.comment = n.comment, t.languages.insertBefore(\"inside\", \"attr-name\", {\n    spread: {\n      pattern: a(\"<SPREAD>\"),\n      inside: t.languages.jsx\n    }\n  }, t.languages.jsx.tag), t.languages.insertBefore(\"inside\", \"special-attr\", {\n    script: {\n      pattern: a(\"=<BRACES>\"),\n      alias: \"language-javascript\",\n      inside: {\n        \"script-punctuation\": {\n          pattern: /^=(?=\\{)/,\n          alias: \"punctuation\"\n        },\n        rest: t.languages.jsx\n      }\n    }\n  }, t.languages.jsx.tag);\n\n  var s = function (t) {\n    return t ? \"string\" == typeof t ? t : \"string\" == typeof t.content ? t.content : t.content.map(s).join(\"\") : \"\";\n  },\n      g = function (n) {\n    for (var e = [], a = 0; a < n.length; a++) {\n      var o = n[a],\n          i = !1;\n\n      if (\"string\" != typeof o && (\"tag\" === o.type && o.content[0] && \"tag\" === o.content[0].type ? \"</\" === o.content[0].content[0].content ? e.length > 0 && e[e.length - 1].tagName === s(o.content[0].content[1]) && e.pop() : \"/>\" === o.content[o.content.length - 1].content || e.push({\n        tagName: s(o.content[0].content[1]),\n        openedBraces: 0\n      }) : e.length > 0 && \"punctuation\" === o.type && \"{\" === o.content ? e[e.length - 1].openedBraces++ : e.length > 0 && e[e.length - 1].openedBraces > 0 && \"punctuation\" === o.type && \"}\" === o.content ? e[e.length - 1].openedBraces-- : i = !0), (i || \"string\" == typeof o) && e.length > 0 && 0 === e[e.length - 1].openedBraces) {\n        var r = s(o);\n        a < n.length - 1 && (\"string\" == typeof n[a + 1] || \"plain-text\" === n[a + 1].type) && (r += s(n[a + 1]), n.splice(a + 1, 1)), a > 0 && (\"string\" == typeof n[a - 1] || \"plain-text\" === n[a - 1].type) && (r = s(n[a - 1]) + r, n.splice(a - 1, 1), a--), n[a] = new t.Token(\"plain-text\", r, null, r);\n      }\n\n      o.content && \"string\" != typeof o.content && g(o.content);\n    }\n  };\n\n  t.hooks.add(\"after-tokenize\", function (t) {\n    \"jsx\" !== t.language && \"tsx\" !== t.language || g(t.tokens);\n  });\n}(Prism);"},"sourceMaps":null,"error":null,"hash":"f86ac677488a1776329293b39cab2521","cacheData":{"env":{}}}